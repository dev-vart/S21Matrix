#include "../s21_matrix.h"

#suite s21_matrix

#tcase Interface

// OK 0
// INVALID_MATRIX 1
// CALC_ERROR 2
// SUCCESS 1
// FAILURE 0
// EPSILON 1e-7

// s21_create_matrix

#test test_create_matrix_success
    matrix_t A = {0};
    int code = s21_create_matrix(3, 3, &A);
    ck_assert_int_eq(code, 0);    
    ck_assert_ptr_nonnull(A.matrix);
    ck_assert_int_eq(A.rows, 3);
    ck_assert_int_eq(A.columns, 3);
    s21_remove_matrix(&A);

#test test_create_matrix_invalid
    matrix_t A = {0};
    int code = s21_create_matrix(-5, 2, &A);
    ck_assert_int_eq(code, 1);
    s21_remove_matrix(&A);

#test test_create_matrix_invalid_2
    int code = s21_create_matrix(2, 2, S21_NULL);
    ck_assert_int_eq(code, 1);

#test test_create_matrix_invalid_3
    matrix_t A = {0};
    int code = s21_create_matrix(2, -2, &A);
    ck_assert_int_eq(code, 1);
    s21_remove_matrix(&A);

// s21_eq_matrix

#test test_eq_matrix_equal1
    matrix_t A = {0}, B = {0};
    s21_create_matrix(2, 2, &A);
    s21_create_matrix(2, 2, &B);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[1][0] = 356;
    A.matrix[1][1] = 488;

    B.matrix[0][0] = 1;
    B.matrix[0][1] = 2.000000;
    B.matrix[1][0] = 356.0;
    B.matrix[1][1] = 488.000000;

    ck_assert_int_eq(s21_eq_matrix(&A, &B), 1);
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);

#test test_eq_matrix_equal2
    matrix_t A = {0}, B = {0};
    s21_create_matrix(2, 2, &A);
    s21_create_matrix(2, 2, &B);
    A.matrix[0][0] = 1.00000011;
    A.matrix[0][1] = 2.00000012;
    A.matrix[1][0] = 3.00000013;
    A.matrix[1][1] = 4.00000014;

    B.matrix[0][0] = 1.00000015;
    B.matrix[0][1] = 2.00000016;
    B.matrix[1][0] = 3.00000017;
    B.matrix[1][1] = 4.00000018;

    ck_assert_int_eq(s21_eq_matrix(&A, &B), 1);
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);

#test test_eq_matrix_not_equal1
    matrix_t A = {0}, B = {0};
    s21_create_matrix(2, 2, &A);
    s21_create_matrix(2, 2, &B);
    A.matrix[0][0] = 1.0000001;
    A.matrix[0][1] = 2.0000001;
    A.matrix[1][0] = 5.0000001;
    A.matrix[1][1] = 4.0000001;

    B.matrix[0][0] = 1.0000003;
    B.matrix[0][1] = 2.0000005;
    B.matrix[1][0] = 3.0000008;
    B.matrix[1][1] = 4.0000002;

    ck_assert_int_eq(s21_eq_matrix(&A, &B), 0);
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);

#test test_eq_matrix_not_equal2
    matrix_t A = {0}, B = {0};
    s21_create_matrix(2, 2, &A);
    s21_create_matrix(2, 2, &B);
    A.matrix[0][0] = 1.0;
    A.matrix[0][1] = 2.0;
    A.matrix[1][0] = 3.0;
    A.matrix[1][1] = 4.0;

    B.matrix[0][0] = 1.0;
    B.matrix[0][1] = 2.0;
    B.matrix[1][0] = 3.0;
    B.matrix[1][1] = 5.0;

    ck_assert_int_eq(s21_eq_matrix(&A, &B), 0);
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);

#test test_eq_matrix_diff_size
    matrix_t A = {0}, B = {0};
    s21_create_matrix(2, 3, &A);
    s21_create_matrix(2, 2, &B);

    ck_assert_int_eq(s21_eq_matrix(&A, &B), 0); 
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);

#test test_eq_matrix_diff_size_2
    matrix_t A = {0}, B = {0};
    s21_create_matrix(3, 2, &A);
    s21_create_matrix(2, 2, &B);

    ck_assert_int_eq(s21_eq_matrix(&A, &B), 0); 
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);

#test test_eq_matrix_invalid1
    matrix_t A = {0}, B = {0};
    ck_assert_int_eq(s21_eq_matrix(&A, &B), 0); 


// s21_sum_matrix

#test test_sum_matrix
    matrix_t A = {0}, B = {0}, C = {0}, res = {0};

    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[1][0] = 3;
    A.matrix[1][1] = 4;

    s21_create_matrix(2, 2, &B);
    B.matrix[0][0] = 1;
    B.matrix[0][1] = 2;
    B.matrix[1][0] = 3;
    B.matrix[1][1] = 4;

    s21_create_matrix(2, 2, &C);
    C.matrix[0][0] = 2;
    C.matrix[0][1] = 4;
    C.matrix[1][0] = 6;
    C.matrix[1][1] = 8;

    ck_assert_int_eq(s21_sum_matrix(&A, &B, &res), 0);

    ck_assert_int_eq(s21_eq_matrix(&res, &C), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&C);
    s21_remove_matrix(&res);

#test test_sum_matrix_error
    int code = s21_sum_matrix(NULL, NULL, NULL);
    ck_assert_int_eq(code, 1);

#test test_sum_matrix_error_2
    matrix_t A = {0};
    s21_create_matrix(2, 2, &A);
    int code = s21_sum_matrix(&A, NULL, NULL);
    ck_assert_int_eq(code, 1);
    s21_remove_matrix(&A);

#test test_sum_matrix_error_3
    matrix_t A = {0}, B = {0}, res = {0};
    s21_create_matrix(2, 3, &A);
    s21_create_matrix(2, 2, &B);
    int code = s21_sum_matrix(&A, &B, &res);
    ck_assert_int_eq(code, 2);
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&res);

#test test_sum_matrix_error_4
    matrix_t A = {0}, B = {0}, res = {0};
    s21_create_matrix(3, 2, &A);
    s21_create_matrix(2, 2, &B);
    int code = s21_sum_matrix(&A, &B, &res);
    ck_assert_int_eq(code, 2);
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&res);

#test test_sum_matrix_error_5
    matrix_t A = {0}, B = {0};
    s21_create_matrix(3, 2, &A);
    s21_create_matrix(2, 2, &B);

    int code = s21_sum_matrix(&A, &B, NULL);
    ck_assert_int_eq(code, 1);
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);

#test test_sum_matrix_error_6
    matrix_t A = {0}, B = {0}, res = {0};
    s21_create_matrix(2, 2, &A);
    s21_create_matrix(2, 1, &B);

    int code = s21_sum_matrix(&A, &B, &res);
    ck_assert_int_eq(code, 2);
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&res);


// s21_sub_matrix


#test test_sub_matrix
    matrix_t A = {0}, B = {0}, C = {0}, res = {0};

    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[1][0] = 3;
    A.matrix[1][1] = 4;

    s21_create_matrix(2, 2, &B);
    B.matrix[0][0] = 1;
    B.matrix[0][1] = 2;
    B.matrix[1][0] = 3;
    B.matrix[1][1] = 4;

    s21_create_matrix(2, 2, &C);
    C.matrix[0][0] = 0;
    C.matrix[0][1] = 0;
    C.matrix[1][0] = 0;
    C.matrix[1][1] = 0;

    ck_assert_int_eq(s21_sub_matrix(&A, &B, &res), 0);

    ck_assert_int_eq(s21_eq_matrix(&res, &C), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&C);
    s21_remove_matrix(&res);

#test test_sub_matrix_error
    int code = s21_sub_matrix(NULL, NULL, NULL);
    ck_assert_int_eq(code, 1);

#test test_sub_matrix_error_2
    matrix_t A = {0};
    s21_create_matrix(2, 2, &A);
    int code = s21_sub_matrix(&A, NULL, NULL);
    ck_assert_int_eq(code, 1);
    s21_remove_matrix(&A);

#test test_sub_matrix_error_3
    matrix_t A = {0}, B = {0}, res = {0};
    s21_create_matrix(2, 3, &A);
    s21_create_matrix(2, 2, &B);

    int code = s21_sub_matrix(&A, &B, &res);
    ck_assert_int_eq(code, 2);
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&res);

#test test_sub_matrix_error_4
    matrix_t A = {0}, B = {0}, res = {0};
    s21_create_matrix(3, 2, &A);
    s21_create_matrix(2, 2, &B);

    int code = s21_sub_matrix(&A, &B, &res);
    ck_assert_int_eq(code, 2);
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&res);

#test test_sub_matrix_error_5
    matrix_t A = {0}, B = {0};
    s21_create_matrix(3, 2, &A);
    s21_create_matrix(2, 2, &B);

    int code = s21_sub_matrix(&A, &B, NULL);
    ck_assert_int_eq(code, 1);
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);

#test test_sub_matrix_error_6
    matrix_t A = {0}, B = {0}, res = {0};
    s21_create_matrix(2, 2, &A);
    s21_create_matrix(2, 5, &B);

    int code = s21_sub_matrix(&A, &B, &res);
    ck_assert_int_eq(code, 2);
    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&res);


// s21_mult_number


#test test_mult_number
    matrix_t A = {0}, B = {0}, res = {0};

    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[1][0] = 3;
    A.matrix[1][1] = 4;

    s21_create_matrix(2, 2, &B);
    B.matrix[0][0] = 2;
    B.matrix[0][1] = 4;
    B.matrix[1][0] = 6;
    B.matrix[1][1] = 8;

    ck_assert_int_eq(s21_mult_number(&A, 2, &res), 0);

    ck_assert_int_eq(s21_eq_matrix(&res, &B), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&res);

#test test_mult_number_error
    int code = s21_mult_number(NULL, 2, NULL);
    ck_assert_int_eq(code, 1);

#test test_mult_number_error_2
    matrix_t A = {0};
    s21_create_matrix(2, 2, &A);
    int code = s21_mult_number(&A, 2, NULL);
    ck_assert_int_eq(code, 1);
    s21_remove_matrix(&A);


// s21_mult_matrix


#test test_mult_matrix
    matrix_t A = {0}, B = {0}, C = {0}, res = {0};

    s21_create_matrix(3, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 4;
    A.matrix[1][0] = 2;
    A.matrix[1][1] = 5;
    A.matrix[2][0] = 3;
    A.matrix[2][1] = 6;

    s21_create_matrix(2, 3, &B);
    B.matrix[0][0] = 1;
    B.matrix[0][1] = -1;
    B.matrix[0][2] = 1;
    B.matrix[1][0] = 2;
    B.matrix[1][1] = 3;
    B.matrix[1][2] = 4;

    s21_create_matrix(3, 3, &C);
    C.matrix[0][0] = 9;
    C.matrix[0][1] = 11;
    C.matrix[0][2] = 17;
    C.matrix[1][0] = 12;
    C.matrix[1][1] = 13;
    C.matrix[1][2] = 22;
    C.matrix[2][0] = 15;
    C.matrix[2][1] = 15;
    C.matrix[2][2] = 27;

    ck_assert_int_eq(s21_mult_matrix(&A, &B, &res), 0);

    ck_assert_int_eq(s21_eq_matrix(&res, &C), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&C);
    s21_remove_matrix(&res);

#test test_mult_matrix_2
    matrix_t A = {0}, B = {0}, C = {0}, res = {0};

    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 4;
    A.matrix[1][0] = 8;
    A.matrix[1][1] = 8;

    s21_create_matrix(2, 1, &B);
    B.matrix[0][0] = 1;
    B.matrix[1][0] = 5;

    s21_create_matrix(2, 1, &C);
    C.matrix[0][0] = 21;
    C.matrix[1][0] = 48;

    ck_assert_int_eq(s21_mult_matrix(&A, &B, &res), 0);

    ck_assert_int_eq(s21_eq_matrix(&res, &C), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&C);
    s21_remove_matrix(&res);

#test test_mult_matrix_error
    matrix_t A = {0}, B = {0}, res = {0};

    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 4;
    A.matrix[1][0] = 8;
    A.matrix[1][1] = 8;

    s21_create_matrix(2, 1, &B);
    B.matrix[0][0] = 1;
    B.matrix[1][0] = 5;

    ck_assert_int_eq(s21_mult_matrix(&B, &A, &res), 2);

    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&res);

#test test_mult_matrix_error_2
    matrix_t A = {0}, B = {0};

    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 4;
    A.matrix[1][0] = 8;
    A.matrix[1][1] = 8;

    s21_create_matrix(2, 1, &B);
    B.matrix[0][0] = 1;
    B.matrix[1][0] = 5;

    ck_assert_int_eq(s21_mult_matrix(&B, &A, NULL), 1);

    s21_remove_matrix(&A);
    s21_remove_matrix(&B);

#test test_mult_matrix_error_3
    matrix_t A = {0};

    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 4;
    A.matrix[1][0] = 8;
    A.matrix[1][1] = 8;

    ck_assert_int_eq(s21_mult_matrix(&A, NULL, NULL), 1);

    s21_remove_matrix(&A);

#test test_mult_matrix_error_4
    matrix_t A = {0};

    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 4;
    A.matrix[1][0] = 8;
    A.matrix[1][1] = 8;

    ck_assert_int_eq(s21_mult_matrix(NULL, &A, NULL), 1);

    s21_remove_matrix(&A);

#test test_mult_matrix_error_5
    matrix_t A = {0}, B = {0};
    s21_create_matrix(2, 2, &A);
    s21_create_matrix(2, 1, &B);

    ck_assert_int_eq(s21_mult_matrix(&B, &A, &B), 1);

    s21_remove_matrix(&A);
    s21_remove_matrix(&B);

// s21_transpose_matrix


#test test_transpose_matrix
    matrix_t A = {0}, B = {0}, res = {0};

    s21_create_matrix(3, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 4;
    A.matrix[1][0] = 2;
    A.matrix[1][1] = 5;
    A.matrix[2][0] = 3;
    A.matrix[2][1] = 6;

    s21_create_matrix(2, 3, &B);
    B.matrix[0][0] = 1;
    B.matrix[0][1] = 2;
    B.matrix[0][2] = 3;
    B.matrix[1][0] = 4;
    B.matrix[1][1] = 5;
    B.matrix[1][2] = 6;

    ck_assert_int_eq(s21_transpose(&A, &res), 0);

    ck_assert_int_eq(s21_eq_matrix(&res, &B), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&res);

#test test_transpose_matrix_2
    matrix_t A = {0}, B = {0}, res = {0};

    s21_create_matrix(3, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 4;
    A.matrix[1][0] = 2;
    A.matrix[1][1] = 5;
    A.matrix[2][0] = 3;
    A.matrix[2][1] = 6;

    s21_create_matrix(2, 3, &B);
    B.matrix[0][0] = 1;
    B.matrix[0][1] = 2;
    B.matrix[0][2] = 3;
    B.matrix[1][0] = 4;
    B.matrix[1][1] = 5;
    B.matrix[1][2] = 6;

    ck_assert_int_eq(s21_transpose(&B, &res), 0);

    ck_assert_int_eq(s21_eq_matrix(&res, &A), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&B);
    s21_remove_matrix(&res);

#test test_transpose_error
    matrix_t A = {0};

    s21_create_matrix(3, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 4;
    A.matrix[1][0] = 2;
    A.matrix[1][1] = 5;
    A.matrix[2][0] = 3;
    A.matrix[2][1] = 6;

    ck_assert_int_eq(s21_transpose(&A, NULL), 1);

    s21_remove_matrix(&A);

#test test_transpose_error_2
    matrix_t res = {0};

    ck_assert_int_eq(s21_transpose(NULL, &res), 1);
    s21_remove_matrix(&res);


// s21_determinant


#test test_determinant_1
    matrix_t A = {0};
    double res = 0, original = -2;
    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[1][0] = 3;
    A.matrix[1][1] = 4;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);

    ck_assert_double_eq_tol(res, original, 1e-7);

    s21_remove_matrix(&A);

#test test_determinant_2
    matrix_t A = {0};
    double res = 0, original = 0;

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[0][2] = 3;
    A.matrix[1][0] = 4;
    A.matrix[1][1] = 5;
    A.matrix[1][2] = 6;
    A.matrix[2][0] = 7;
    A.matrix[2][1] = 8;
    A.matrix[2][2] = 9;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);

    ck_assert_double_eq_tol(res, original, 1e-7);

    s21_remove_matrix(&A);

#test test_determinant_3
    matrix_t A = {0};
    double res = 0, original = 3;

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 0;
    A.matrix[0][1] = 2;
    A.matrix[0][2] = 3;
    A.matrix[1][0] = 4;
    A.matrix[1][1] = 5;
    A.matrix[1][2] = 6;
    A.matrix[2][0] = 7;
    A.matrix[2][1] = 8;
    A.matrix[2][2] = 9;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);

    ck_assert_double_eq_tol(res, original, 1e-7);

    s21_remove_matrix(&A);

#test test_determinant_4
    matrix_t A = {0};
    double res = 0, original = 84;

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 0;
    A.matrix[0][1] = 2;
    A.matrix[0][2] = 3;
    A.matrix[1][0] = 0;
    A.matrix[1][1] = 0;
    A.matrix[1][2] = 6;
    A.matrix[2][0] = 7;
    A.matrix[2][1] = 8;
    A.matrix[2][2] = 9;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);

    ck_assert_double_eq_tol(res, original, 1e-7);

    s21_remove_matrix(&A);

#test test_determinant_5
    matrix_t A = {0};
    double res = 0, original = -1;

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 1;
    A.matrix[0][2] = 1;
    A.matrix[1][0] = 2;
    A.matrix[1][1] = 2;
    A.matrix[1][2] = 3;
    A.matrix[2][0] = 4;
    A.matrix[2][1] = 5;
    A.matrix[2][2] = 6;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);

    ck_assert_double_eq_tol(res, original, 1e-7);

    s21_remove_matrix(&A);

#test test_determinant_6
    matrix_t A = {0};
    double res = 0;

    s21_create_matrix(3, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 1;
    A.matrix[1][0] = 2;
    A.matrix[1][1] = 2;
    A.matrix[2][0] = 4;
    A.matrix[2][1] = 5;

    ck_assert_int_eq(s21_determinant(&A, &res), 2);

    s21_remove_matrix(&A);

#test test_determinant_7
    matrix_t A = {0};

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 1;
    A.matrix[0][2] = 1;
    A.matrix[1][0] = 2;
    A.matrix[1][1] = 2;
    A.matrix[1][2] = 3;
    A.matrix[2][0] = 4;
    A.matrix[2][1] = 5;
    A.matrix[2][2] = 6;

    ck_assert_int_eq(s21_determinant(&A, NULL), 1);

    s21_remove_matrix(&A);
    
#test test_determinant_8
    ck_assert_int_eq(s21_determinant(NULL, NULL), 1);

#test test_determinant_zero_row
    matrix_t A = {0};
    double res = 1.0;

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 0; 
    A.matrix[0][1] = 0; 
    A.matrix[0][2] = 0;
    A.matrix[1][0] = 1; 
    A.matrix[1][1] = 2; 
    A.matrix[1][2] = 3;
    A.matrix[2][0] = 4; 
    A.matrix[2][1] = 5; 
    A.matrix[2][2] = 6;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);
    ck_assert_double_eq_tol(res, 0.0, 1e-7);

    s21_remove_matrix(&A);

#test test_determinant_duplicate_rows
    matrix_t A = {0};
    double res = 1.0;

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 1; 
    A.matrix[0][1] = 2; 
    A.matrix[0][2] = 3;
    A.matrix[1][0] = 1; 
    A.matrix[1][1] = 2; 
    A.matrix[1][2] = 3;
    A.matrix[2][0] = 4; 
    A.matrix[2][1] = 5; 
    A.matrix[2][2] = 6;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);
    ck_assert_double_eq_tol(res, 0.0, 1e-7);

    s21_remove_matrix(&A);

#test test_determinant_identity
    matrix_t A = {0};
    double res = 0.0;

    s21_create_matrix(4, 4, &A);
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            A.matrix[i][j] = (i == j) ? 1.0 : 0.0;
        }
    }

    ck_assert_int_eq(s21_determinant(&A, &res), 0);
    ck_assert_double_eq_tol(res, 1.0, 1e-7);

    s21_remove_matrix(&A);

#test test_determinant_upper_triangular
    matrix_t A = {0};
    double res = 0.0;

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 2;
    A.matrix[0][1] = 3; 
    A.matrix[0][2] = 1;
    A.matrix[1][0] = 0; 
    A.matrix[1][1] = 4; 
    A.matrix[1][2] = 5;
    A.matrix[2][0] = 0; 
    A.matrix[2][1] = 0; 
    A.matrix[2][2] = 6;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);
    ck_assert_double_eq_tol(res, 2*4*6, 1e-7);

    s21_remove_matrix(&A);

#test test_determinant_1x1
    matrix_t A = {0};
    double res = 0.0;

    s21_create_matrix(1, 1, &A);
    A.matrix[0][0] = 42.0;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);
    ck_assert_double_eq_tol(res, 42.0, 1e-7);

    s21_remove_matrix(&A);

#test test_determinant_negative_fractions
    matrix_t A = {0};
    double res = 0.0;

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = -1.5; 
    A.matrix[0][1] = 2.0; 
    A.matrix[0][2] = 3.5;
    A.matrix[1][0] = 4.25; 
    A.matrix[1][1] = -5.0; 
    A.matrix[1][2] = 6.0;
    A.matrix[2][0] = 7.75; 
    A.matrix[2][1] = 8.0; 
    A.matrix[2][2] = -9.0;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);
    ck_assert_double_eq_tol(res, 428.625, 1e-07);

    s21_remove_matrix(&A);

#test test_determinant_tiny_values
    matrix_t A = {0};
    double res = 0.0;

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 1e-10; 
    A.matrix[0][1] = 2e-10; 
    A.matrix[0][2] = 3e-10;
    A.matrix[1][0] = 4e-10; 
    A.matrix[1][1] = 5e-10; 
    A.matrix[1][2] = 6e-10;
    A.matrix[2][0] = 7e-10; 
    A.matrix[2][1] = 8e-10; 
    A.matrix[2][2] = 9e-10;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);
    ck_assert_double_eq_tol(res, 0.0, 1e-20);
    s21_remove_matrix(&A);

#test test_determinant_large_4x4
    matrix_t A = {0};
    double res = 0.0;

    s21_create_matrix(4, 4, &A);
    A.matrix[0][0] = 3; 
    A.matrix[0][1] = 2; 
    A.matrix[0][2] = 0;
    A.matrix[0][3] = 1;
    A.matrix[1][0] = 4; 
    A.matrix[1][1] = 0; 
    A.matrix[1][2] = 1; 
    A.matrix[1][3] = 2;
    A.matrix[2][0] = 3; 
    A.matrix[2][1] = 0; 
    A.matrix[2][2] = 2; 
    A.matrix[2][3] = 1;
    A.matrix[3][0] = 9; 
    A.matrix[3][1] = 2; 
    A.matrix[3][2] = 3; 
    A.matrix[3][3] = 1;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);
    ck_assert_double_eq_tol(res, 24.0, 1e-07);

    s21_remove_matrix(&A);

#test test_determinant_almost_identity
    matrix_t A = {0};
    double res = 0.0;

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 1.0; 
    A.matrix[0][1] = 0.0; 
    A.matrix[0][2] = 0.0;
    A.matrix[1][0] = 0.0; 
    A.matrix[1][1] = 1.0; 
    A.matrix[1][2] = 0.0;
    A.matrix[2][0] = 0.0; 
    A.matrix[2][1] = 0.0; 
    A.matrix[2][2] = 0.999999;

    ck_assert_int_eq(s21_determinant(&A, &res), 0);
    ck_assert_double_eq_tol(res, 0.999999, 1e-7);

    s21_remove_matrix(&A);



// s21_calc_complements


#test test_calc_complements_1
    matrix_t A = {0}, res = {0}, original = {0};

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[0][2] = 3;
    A.matrix[1][0] = 0;
    A.matrix[1][1] = 4;
    A.matrix[1][2] = 2;
    A.matrix[2][0] = 5;
    A.matrix[2][1] = 2;
    A.matrix[2][2] = 1;

    s21_create_matrix(3, 3, &original);
    original.matrix[0][0] = 0;
    original.matrix[0][1] = 10;
    original.matrix[0][2] = -20;
    original.matrix[1][0] = 4;
    original.matrix[1][1] = -14;
    original.matrix[1][2] = 8;
    original.matrix[2][0] = -8;
    original.matrix[2][1] = -2;
    original.matrix[2][2] = 4;

    ck_assert_int_eq(s21_calc_complements(&A, &res), 0);

    ck_assert_int_eq(s21_eq_matrix(&res, &original), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&original);
    s21_remove_matrix(&res);

#test test_calc_complements_2
    matrix_t A = {0};

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[0][2] = 3;
    A.matrix[1][0] = 0;
    A.matrix[1][1] = 4;
    A.matrix[1][2] = 2;
    A.matrix[2][0] = 5;
    A.matrix[2][1] = 2;
    A.matrix[2][2] = 1;

    ck_assert_int_eq(s21_calc_complements(&A, NULL), 1);

    s21_remove_matrix(&A);

#test test_calc_complements_3
    matrix_t res = {0};

    ck_assert_int_eq(s21_calc_complements(NULL, &res), 1);
    s21_remove_matrix(&res);

#test test_calc_complements_4
    matrix_t A = {0}, res = {0}, original = {0};

    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[1][0] = 3;
    A.matrix[1][1] = 4;

    s21_create_matrix(2, 2, &original);
    original.matrix[0][0] = 4;
    original.matrix[0][1] = -3;
    original.matrix[1][0] = -2;
    original.matrix[1][1] = 1;

    ck_assert_int_eq(s21_calc_complements(&A, &res), 0);
    ck_assert_int_eq(s21_eq_matrix(&res, &original), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&res);
    s21_remove_matrix(&original);

#test test_calc_complements_5
    matrix_t A = {0}, res = {0}, original = {0};

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 0;
    A.matrix[0][1] = 2;
    A.matrix[0][2] = 1;
    A.matrix[1][0] = 1;
    A.matrix[1][1] = 0;
    A.matrix[1][2] = 4;
    A.matrix[2][0] = 5;
    A.matrix[2][1] = 2;
    A.matrix[2][2] = 3;

    s21_create_matrix(3, 3, &original);
    original.matrix[0][0] = -8;
    original.matrix[0][1] = 17;
    original.matrix[0][2] = 2;
    original.matrix[1][0] = -4;
    original.matrix[1][1] = -5;
    original.matrix[1][2] = 10;
    original.matrix[2][0] = 8;
    original.matrix[2][1] = 1;
    original.matrix[2][2] = -2;

    ck_assert_int_eq(s21_calc_complements(&A, &res), 0);
    ck_assert_int_eq(s21_eq_matrix(&res, &original), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&res);
    s21_remove_matrix(&original);

#test test_calc_complements_identity
    matrix_t A = {0}, res = {0}, original = {0};

    s21_create_matrix(4, 4, &A);
    s21_create_matrix(4, 4, &original);

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            A.matrix[i][j] = (i == j) ? 1 : 0;
        }
    }

    original.matrix[0][0] = 1;
    original.matrix[0][1] = 0;
    original.matrix[0][2] = 0;
    original.matrix[0][3] = 0;
    original.matrix[1][0] = 0;
    original.matrix[1][1] = 1;
    original.matrix[1][2] = 0;
    original.matrix[1][3] = 0;
    original.matrix[2][0] = 0;
    original.matrix[2][1] = 0;
    original.matrix[2][2] = 1;
    original.matrix[2][3] = 0;
    original.matrix[3][0] = 0;
    original.matrix[3][1] = 0;
    original.matrix[3][2] = 0;
    original.matrix[3][3] = 1;

    ck_assert_int_eq(s21_calc_complements(&A, &res), 0);
    ck_assert_int_eq(s21_eq_matrix(&res, &original), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&res);
    s21_remove_matrix(&original);

#test test_calc_complements_6
    matrix_t A = {0}, res = {0};

    s21_create_matrix(2, 3, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[0][2] = 3;
    A.matrix[1][0] = 4;
    A.matrix[1][1] = 5;
    A.matrix[1][2] = 6;

    ck_assert_int_eq(s21_calc_complements(&A, &res), 2);

    s21_remove_matrix(&A);
    s21_remove_matrix(&res);



// s21_inverse_matrix


#test test_inverse_matrix_1
    matrix_t A = {0}, res = {0}, original = {0};

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 2;
    A.matrix[0][1] = 5;
    A.matrix[0][2] = 7;
    A.matrix[1][0] = 6;
    A.matrix[1][1] = 3;
    A.matrix[1][2] = 4;
    A.matrix[2][0] = 5;
    A.matrix[2][1] = -2;
    A.matrix[2][2] = -3;

    s21_create_matrix(3, 3, &original);
    original.matrix[0][0] = 1;
    original.matrix[0][1] = -1;
    original.matrix[0][2] = 1;
    original.matrix[1][0] = -38;
    original.matrix[1][1] = 41;
    original.matrix[1][2] = -34;
    original.matrix[2][0] = 27;
    original.matrix[2][1] = -29;
    original.matrix[2][2] = 24;

    ck_assert_int_eq(s21_inverse_matrix(&A, &res), 0);

    ck_assert_int_eq(s21_eq_matrix(&res, &original), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&res);
    s21_remove_matrix(&original);

#test test_inverse_matrix_2
    matrix_t A = {0};

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 2;
    A.matrix[0][1] = 5;
    A.matrix[0][2] = 7;
    A.matrix[1][0] = 6;
    A.matrix[1][1] = 3;
    A.matrix[1][2] = 4;
    A.matrix[2][0] = 5;
    A.matrix[2][1] = -2;
    A.matrix[2][2] = -3;

    ck_assert_int_eq(s21_inverse_matrix(&A, NULL), 1);

    s21_remove_matrix(&A);

#test test_inverse_matrix_3
    matrix_t A = {0}, res = {0};

    s21_create_matrix(2, 3, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[0][2] = 3;
    A.matrix[1][0] = 4;
    A.matrix[1][1] = 5;
    A.matrix[1][2] = 6;

    ck_assert_int_eq(s21_inverse_matrix(&A, &res), 2);

    s21_remove_matrix(&A);
    s21_remove_matrix(&res);

#test test_inverse_matrix_4
    matrix_t res = {0};

    ck_assert_int_eq(s21_inverse_matrix(NULL, &res), 1);
    s21_remove_matrix(&res);

#test test_inverse_matrix_5
    matrix_t A = {0}, res = {0}, original = {0};

    s21_create_matrix(1, 1, &A);
    A.matrix[0][0] = 2;

    s21_create_matrix(1, 1, &original);
    original.matrix[0][0] = 0.5;

    ck_assert_int_eq(s21_inverse_matrix(&A, &res), 0);
    ck_assert_int_eq(s21_eq_matrix(&res, &original), SUCCESS);

    s21_remove_matrix(&A);
    s21_remove_matrix(&res);
    s21_remove_matrix(&original);

#test test_inverse_fractions
    matrix_t A = {0}, res = {0};

    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 0.5; 
    A.matrix[0][1] = -1.5;
    A.matrix[1][0] = 2.0; 
    A.matrix[1][1] = 3.0;

    ck_assert_int_eq(s21_inverse_matrix(&A, &res), 0);

    ck_assert_double_eq_tol(res.matrix[0][0], 0.666667, 1e-06);
    ck_assert_double_eq_tol(res.matrix[0][1], 0.333333, 1e-06);
    ck_assert_double_eq_tol(res.matrix[1][0], -0.444444, 1e-06);
    ck_assert_double_eq_tol(res.matrix[1][1], 0.111111, 1e-06);

    s21_remove_matrix(&A);
    s21_remove_matrix(&res);

#test test_inverse_singular
    matrix_t A = {0}, res = {0};

    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 1; 
    A.matrix[0][1] = 2;
    A.matrix[1][0] = 2; 
    A.matrix[1][1] = 4;

    ck_assert_int_eq(s21_inverse_matrix(&A, &res), 2);

    s21_remove_matrix(&A);
    s21_remove_matrix(&res);

#test test_inverse_matrix_6
    matrix_t A = {0}, res = {0};

    s21_create_matrix(1, 1, &A);
    A.matrix[0][0] = 0;

    ck_assert_int_eq(s21_inverse_matrix(&A, &res), 2);
    
    s21_remove_matrix(&A);
    s21_remove_matrix(&res);

#test test_inverse_matrix_7
    matrix_t A = {0}, res = {0};

    s21_create_matrix(3, 3, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[0][2] = 3;
    A.matrix[1][0] = 4;
    A.matrix[1][1] = 5;
    A.matrix[1][2] = 6;
    A.matrix[2][0] = 7;
    A.matrix[2][1] = 8;
    A.matrix[2][2] = 9;

    ck_assert_int_eq(s21_inverse_matrix(&A, &res), 2);

    s21_remove_matrix(&A);
    s21_remove_matrix(&res);

// addon funcs

#test test_minor_matrix_invalid_1
    matrix_t A = {0}, res = {0};
    int code = s21_minor_matrix(&A, 1, 1, &res);
    ck_assert_int_eq(code, 1);
    s21_remove_matrix(&res);

#test test_print_matrix_1
    matrix_t A = {0};

    s21_create_matrix(2, 2, &A);
    A.matrix[0][0] = 1;
    A.matrix[0][1] = 2;
    A.matrix[1][0] = 3;
    A.matrix[1][1] = 4;

    int code = s21_print_matrix(&A);
    ck_assert_int_eq(code, 0);
    s21_remove_matrix(&A);

#test test_print_matrix_invalid_1
    matrix_t A = {0};
    int code = s21_print_matrix(&A);
    ck_assert_int_eq(code, 1);
    s21_remove_matrix(&A);

#test test_fill_matrix_1
    matrix_t A = {0}, res = {0};

    s21_create_matrix(2, 2, &A);

    int code = s21_fill_matrix(&A, 3, &res);
    ck_assert_int_eq(code, 0);
    s21_remove_matrix(&A);
    s21_remove_matrix(&res);

#test test_fill_matrix_invalid_1
    matrix_t A = {0}, res = {0};
    int code = s21_fill_matrix(&A, 3, &res);
    ck_assert_int_eq(code, 1);
    s21_remove_matrix(&res);

#test test_input_matrix_1
    matrix_t A = {0}, res = {0};

    s21_create_matrix(2, 2, &A);

    if (!freopen("tests/input_test.txt", "r", stdin)) {
    ck_abort_msg("Failed to redirect stdin to input_test.txt");
    }
    int code = s21_input_matrix(&A, &res);
    ck_assert_int_eq(code, 0);
    s21_remove_matrix(&A);
    s21_remove_matrix(&res);

#test test_input_matrix_invalid_1
    matrix_t A = {0}, res = {0};
    int code = s21_input_matrix(&A, &res);
    ck_assert_int_eq(code, 1);
    s21_remove_matrix(&res);